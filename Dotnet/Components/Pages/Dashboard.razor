@page "/dashboard"
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS
@using System.Text.Json;

@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<p role="status">Response: @content</p>
<button id="button" class="btn btn-primary" @onclick="LoadApi">LoadApi</button>

<div>
  <canvas id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script src="/js/charts.js"></script>

<script>
    document.getElementById('button').click();
    interval = setInterval(function() {
        document.getElementById('button').click();
    }, 60000);
</script>

@code {
    private int currentCount = 0;
    private string content = "Click on the button.";
    public GetResponse? response = null;

    private void IncrementCount()
    {
        currentCount++;
    }

    private async void LoadApi(){    
        content = "Loading";
        @* HttpClient client = new HttpClient(); *@

        HttpClient client = HttpFactory.CreateClient("PythonWebServer");

        var http_response = await client.GetAsync("/");
        content = await http_response.Content.ReadAsStringAsync();

        Console.WriteLine("content", content);

        @* JS.InvokeAsync<string>(); *@
        
        @* GetResponse response = JsonSerializer.Deserialize<GetResponse>(content); *@
        response = JsonSerializer.Deserialize<GetResponse>(content);
        var labels = response.Heart_Rate.Select(rate => rate.TimeStamp).ToList();


        StateHasChanged();

        Console.WriteLine("labels", labels);
    }

}
